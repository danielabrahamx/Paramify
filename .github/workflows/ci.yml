name: Paramify ICP CI/CD Pipeline

on:
  push:
    branches: [main, icp-migration, develop]
  pull_request:
    branches: [main, icp-migration]
  workflow_dispatch:

env:
  DFX_VERSION: "0.16.1"
  NODE_VERSION: "20"
  RUST_VERSION: "1.75.0"
  VESSEL_VERSION: "0.7.0"

jobs:
  # Code Quality Checks
  lint-and-format:
    name: Lint and Format
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          components: rustfmt, clippy
      
      - name: Install dependencies
        run: |
          npm ci
          cd frontend && npm ci && cd ..
      
      - name: Lint JavaScript/TypeScript
        run: |
          npm run lint:js || true
          cd frontend && npm run lint || true && cd ..
      
      - name: Lint Rust
        run: |
          cargo fmt --all -- --check
          cargo clippy --all -- -D warnings
      
      - name: Check Motoko formatting
        run: |
          npm install -g mo-fmt
          find src/canisters -name "*.mo" -exec mo-fmt --check {} \;

  # Unit Tests
  unit-tests:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint-and-format
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
      
      - name: Setup DFX
        run: |
          wget https://github.com/dfinity/sdk/releases/download/${DFX_VERSION}/dfxvm-x86_64-unknown-linux-gnu.tar.gz
          tar -xzf dfxvm-x86_64-unknown-linux-gnu.tar.gz
          ./dfxvm-x86_64-unknown-linux-gnu/dfxvm init
          echo "$HOME/.local/share/dfx/bin" >> $GITHUB_PATH
      
      - name: Setup Vessel
        run: |
          npm install -g vessel@${VESSEL_VERSION}
          vessel install
      
      - name: Run Motoko tests
        run: |
          $(vessel bin)/moc -r $(vessel sources) -wasi-system-api src/canisters/insurance/insurance.test.mo
          $(vessel bin)/moc -r $(vessel sources) -wasi-system-api src/canisters/payments/payments.test.mo
      
      - name: Run Rust tests
        run: |
          cargo test --manifest-path=src/canisters/oracle/Cargo.toml
      
      - name: Run Frontend tests
        run: |
          cd frontend
          npm test -- --watchAll=false --passWithNoTests --coverage
      
      - name: Upload coverage
        uses: codecov/codecov-action@v3
        with:
          files: ./frontend/coverage/lcov.info
          flags: frontend
          name: frontend-coverage

  # Build Canisters
  build-canisters:
    name: Build Canisters
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup build environment
        run: |
          sudo apt-get update
          sudo apt-get install -y build-essential pkg-config libssl-dev
      
      - name: Setup Rust
        uses: actions-rust-lang/setup-rust-toolchain@v1
        with:
          toolchain: ${{ env.RUST_VERSION }}
          target: wasm32-unknown-unknown
      
      - name: Setup DFX
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          echo "$HOME/bin" >> $GITHUB_PATH
      
      - name: Install ic-wasm
        run: cargo install ic-wasm
      
      - name: Build Insurance canister
        run: |
          dfx build insurance --check
      
      - name: Build Oracle canister
        run: |
          cargo build --manifest-path=src/canisters/oracle/Cargo.toml \
                       --target wasm32-unknown-unknown --release
          ic-wasm target/wasm32-unknown-unknown/release/oracle.wasm \
                  -o target/wasm32-unknown-unknown/release/oracle_optimized.wasm shrink
      
      - name: Build Payments canister
        run: |
          dfx build payments --check
      
      - name: Check WASM sizes
        run: |
          echo "WASM Module Sizes:"
          ls -lh .dfx/local/canisters/insurance/*.wasm || true
          ls -lh target/wasm32-unknown-unknown/release/*.wasm || true
          ls -lh .dfx/local/canisters/payments/*.wasm || true
      
      - name: Upload artifacts
        uses: actions/upload-artifact@v3
        with:
          name: canister-wasm-modules
          path: |
            .dfx/local/canisters/**/*.wasm
            target/wasm32-unknown-unknown/release/*_optimized.wasm

  # Integration Tests
  integration-tests:
    name: Integration Tests
    runs-on: ubuntu-latest
    needs: build-canisters
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup test environment
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          echo "$HOME/bin" >> $GITHUB_PATH
          npm ci
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
        with:
          name: canister-wasm-modules
          path: .dfx/local/canisters
      
      - name: Start local replica
        run: |
          dfx start --clean --background
          sleep 5
      
      - name: Deploy canisters
        run: |
          dfx deploy --network local
      
      - name: Run integration tests
        run: |
          $(vessel bin)/moc -r $(vessel sources) -wasi-system-api \
            tests/integration/canister-integration.test.mo
      
      - name: Stop replica
        if: always()
        run: dfx stop

  # Security Scan
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: build-canisters
    steps:
      - uses: actions/checkout@v4
      
      - name: Run Trivy security scan
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'
      
      - name: Upload Trivy results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'
      
      - name: Check for vulnerable dependencies
        run: |
          npm audit --audit-level=high
          cd frontend && npm audit --audit-level=high && cd ..
          cargo audit --file Cargo.lock || true

  # Build Frontend
  build-frontend:
    name: Build Frontend
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests]
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}
          cache: 'npm'
      
      - name: Install dependencies
        run: |
          cd frontend
          npm ci
      
      - name: Build frontend
        run: |
          cd frontend
          npm run build
        env:
          CI: true
          NODE_ENV: production
      
      - name: Check build output
        run: |
          echo "Build output size:"
          du -sh frontend/dist
          ls -la frontend/dist
      
      - name: Upload frontend build
        uses: actions/upload-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist

  # Deploy to Testnet (only on main branch)
  deploy-testnet:
    name: Deploy to Testnet
    runs-on: ubuntu-latest
    needs: [build-canisters, build-frontend, security-scan]
    if: github.ref == 'refs/heads/main' && github.event_name == 'push'
    environment:
      name: testnet
      url: https://testnet.paramify.ic0.app
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup DFX
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          echo "$HOME/bin" >> $GITHUB_PATH
      
      - name: Download canister artifacts
        uses: actions/download-artifact@v3
        with:
          name: canister-wasm-modules
          path: .dfx/local/canisters
      
      - name: Download frontend build
        uses: actions/download-artifact@v3
        with:
          name: frontend-build
          path: frontend/dist
      
      - name: Configure DFX identity
        run: |
          echo "${{ secrets.DFX_IDENTITY_PEM }}" > identity.pem
          dfx identity import testnet-deployer identity.pem
          dfx identity use testnet-deployer
          rm identity.pem
      
      - name: Deploy to testnet
        run: |
          dfx deploy --network testnet --with-cycles 10000000000000
        env:
          DFX_NETWORK: testnet
      
      - name: Verify deployment
        run: |
          dfx canister status --all --network testnet
      
      - name: Run smoke tests
        run: |
          dfx canister call insurance get_system_status --network testnet
          dfx canister call oracle get_status --network testnet
          dfx canister call payments getPoolStats --network testnet

  # Performance Test
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'pull_request'
    steps:
      - uses: actions/checkout@v4
      
      - name: Setup environment
        run: |
          sh -ci "$(curl -fsSL https://sdk.dfinity.org/install.sh)"
          echo "$HOME/bin" >> $GITHUB_PATH
          npm ci
      
      - name: Start replica
        run: |
          dfx start --clean --background
          sleep 5
      
      - name: Deploy canisters
        run: |
          dfx deploy --network local
      
      - name: Run performance tests
        run: |
          npm run test:performance || true
      
      - name: Generate performance report
        run: |
          echo "## Performance Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|--------|-------|" >> $GITHUB_STEP_SUMMARY
          echo "| Response Time | < 2s |" >> $GITHUB_STEP_SUMMARY
          echo "| Throughput | > 100 req/s |" >> $GITHUB_STEP_SUMMARY
          echo "| Memory Usage | < 1GB |" >> $GITHUB_STEP_SUMMARY

  # Release
  release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [deploy-testnet]
    if: github.ref == 'refs/heads/main' && contains(github.event.head_commit.message, '[release]')
    steps:
      - uses: actions/checkout@v4
      
      - name: Download artifacts
        uses: actions/download-artifact@v3
      
      - name: Create release archive
        run: |
          tar -czf paramify-icp-release.tar.gz \
            canister-wasm-modules \
            frontend-build \
            interfaces \
            docs
      
      - name: Generate changelog
        run: |
          echo "## What's Changed" > CHANGELOG.md
          git log --pretty=format:"- %s" $(git describe --tags --abbrev=0)..HEAD >> CHANGELOG.md
      
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ github.run_number }}
          name: Release v${{ github.run_number }}
          body_path: CHANGELOG.md
          files: |
            paramify-icp-release.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Notify
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [lint-and-format, unit-tests, build-canisters, integration-tests, security-scan]
    if: always()
    steps:
      - name: Notify Slack
        if: env.SLACK_WEBHOOK_URL != ''
        uses: 8398a7/action-slack@v3
        with:
          status: ${{ job.status }}
          text: |
            Pipeline Status: ${{ job.status }}
            Branch: ${{ github.ref }}
            Commit: ${{ github.sha }}
            Author: ${{ github.actor }}
          webhook_url: ${{ secrets.SLACK_WEBHOOK_URL }}
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}
      
      - name: Update PR status
        if: github.event_name == 'pull_request'
        uses: actions/github-script@v6
        with:
          script: |
            const status = '${{ job.status }}' === 'success' ? '✅' : '❌';
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `CI Pipeline ${status} - [View Results](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})`
            })