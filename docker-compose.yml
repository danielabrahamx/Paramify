version: '3.8'

services:
  # DFX local replica service
  dfx-replica:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: paramify-dfx
    environment:
      - DFX_NETWORK=local
      - REPLICA_PORT=4943
      - NODE_ENV=development
    volumes:
      - .:/app:rw
      - dfx-data:/home/developer/.cache/dfinity
      - cargo-cache:/home/developer/.cargo
      - node-modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
    ports:
      - "4943:4943"  # DFX replica port
      - "8000:8000"  # Candid UI port
    networks:
      - paramify-network
    command: |
      bash -c "
        echo 'Starting DFX replica...'
        dfx start --clean --background --host 0.0.0.0:4943
        echo 'Waiting for replica to be ready...'
        sleep 10
        echo 'Deploying canisters...'
        ./scripts/deploy-secure.sh
        echo 'DFX replica is running. Keeping container alive...'
        tail -f /dev/null
      "
    healthcheck:
      test: ["CMD", "dfx", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s

  # Frontend development server
  frontend:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: paramify-frontend
    environment:
      - NODE_ENV=development
      - VITE_DFX_NETWORK=local
      - VITE_REPLICA_PORT=4943
      - VITE_HOST=0.0.0.0
    volumes:
      - ./frontend:/app/frontend:rw
      - frontend-node-modules:/app/frontend/node_modules
    ports:
      - "3000:3000"  # Frontend dev server
    networks:
      - paramify-network
    depends_on:
      dfx-replica:
        condition: service_healthy
    command: |
      bash -c "
        cd frontend
        npm run dev -- --host 0.0.0.0 --port 3000
      "
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 20s

  # Development environment with all tools
  dev:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: paramify-dev
    environment:
      - DFX_NETWORK=local
      - NODE_ENV=development
    volumes:
      - .:/app:rw
      - dfx-data:/home/developer/.cache/dfinity
      - cargo-cache:/home/developer/.cargo
      - node-modules:/app/node_modules
      - frontend-node-modules:/app/frontend/node_modules
    networks:
      - paramify-network
    depends_on:
      - dfx-replica
    stdin_open: true
    tty: true
    command: /bin/bash

  # Test runner service
  test:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: paramify-test
    environment:
      - DFX_NETWORK=local
      - NODE_ENV=test
    volumes:
      - .:/app:rw
      - cargo-cache:/home/developer/.cargo
      - node-modules:/app/node_modules
    networks:
      - paramify-network
    depends_on:
      dfx-replica:
        condition: service_healthy
    command: |
      bash -c "
        echo 'Running tests...'
        npm run test
      "
    profiles:
      - test

networks:
  paramify-network:
    driver: bridge

volumes:
  dfx-data:
    driver: local
  cargo-cache:
    driver: local
  node-modules:
    driver: local
  frontend-node-modules:
    driver: local