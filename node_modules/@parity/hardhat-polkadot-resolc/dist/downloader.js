"use strict";
var __createBinding = (this && this.__createBinding) || (Object.create ? (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    var desc = Object.getOwnPropertyDescriptor(m, k);
    if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
      desc = { enumerable: true, get: function() { return m[k]; } };
    }
    Object.defineProperty(o, k2, desc);
}) : (function(o, m, k, k2) {
    if (k2 === undefined) k2 = k;
    o[k2] = m[k];
}));
var __setModuleDefault = (this && this.__setModuleDefault) || (Object.create ? (function(o, v) {
    Object.defineProperty(o, "default", { enumerable: true, value: v });
}) : function(o, v) {
    o["default"] = v;
});
var __importStar = (this && this.__importStar) || (function () {
    var ownKeys = function(o) {
        ownKeys = Object.getOwnPropertyNames || function (o) {
            var ar = [];
            for (var k in o) if (Object.prototype.hasOwnProperty.call(o, k)) ar[ar.length] = k;
            return ar;
        };
        return ownKeys(o);
    };
    return function (mod) {
        if (mod && mod.__esModule) return mod;
        var result = {};
        if (mod != null) for (var k = ownKeys(mod), i = 0; i < k.length; i++) if (k[i] !== "default") __createBinding(result, mod, k[i]);
        __setModuleDefault(result, mod);
        return result;
    };
})();
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.ResolcCompilerDownloader = void 0;
/* eslint-disable @typescript-eslint/no-explicit-any */
const path_1 = __importDefault(require("path"));
const fs_extra_1 = __importDefault(require("fs-extra"));
const debug_1 = __importDefault(require("debug"));
const os_1 = __importDefault(require("os"));
const child_process_1 = require("child_process");
const errors_1 = require("hardhat/internal/core/errors");
const multi_process_mutex_1 = require("hardhat/internal/util/multi-process-mutex");
const downloader_1 = require("hardhat/internal/solidity/compiler/downloader");
const fs_xattr_1 = require("fs-xattr");
const download_1 = require("./download");
const types_1 = require("./types");
const errors_2 = require("./errors");
const constants_1 = require("./constants");
const log = (0, debug_1.default)("hardhat:core:resolc:downloader");
class ResolcCompilerDownloader {
    _platform;
    _compilersDir;
    _compilerListCachePeriodMs;
    _downloadFunction;
    static getCompilerPlatform() {
        switch (os_1.default.platform()) {
            case "win32":
                return downloader_1.CompilerPlatform.WINDOWS;
            case "linux":
                return downloader_1.CompilerPlatform.LINUX;
            case "darwin":
                return downloader_1.CompilerPlatform.MACOS;
            default:
                return downloader_1.CompilerPlatform.WASM;
        }
    }
    static getCompilerName() {
        switch (os_1.default.platform()) {
            case "win32":
                return types_1.CompilerName.WINDOWS;
            case "linux":
                return types_1.CompilerName.LINUX;
            case "darwin":
                return types_1.CompilerName.MACOS;
            default:
                return types_1.CompilerName.WASM;
        }
    }
    static _downloaderPerPlatform = new Map();
    static getConcurrencySafeDownloader(platform, compilersDir) {
        const key = platform + compilersDir;
        if (!this._downloaderPerPlatform.has(key)) {
            this._downloaderPerPlatform.set(key, new ResolcCompilerDownloader(platform, compilersDir));
        }
        return this._downloaderPerPlatform.get(key);
    }
    static defaultCompilerListCachePeriod = 3_600_00;
    _mutex = new multi_process_mutex_1.MultiProcessMutex("compiler-download");
    constructor(_platform, _compilersDir, _compilerListCachePeriodMs = ResolcCompilerDownloader.defaultCompilerListCachePeriod, _downloadFunction = download_1.download) {
        this._platform = _platform;
        this._compilersDir = _compilersDir;
        this._compilerListCachePeriodMs = _compilerListCachePeriodMs;
        this._downloadFunction = _downloadFunction;
    }
    async isCompilerDownloaded(version) {
        const build = await this._getCompilerBuild(version);
        if (build === undefined) {
            return false;
        }
        const downloadPath = this._getCompilerBinaryPathFromBuild(build);
        return fs_extra_1.default.pathExists(downloadPath);
    }
    async downloadCompiler(version, downloadStartedCb, downloadEndedCb) {
        await this._mutex.use(async () => {
            const isCompilerDownloaded = await this.isCompilerDownloaded(version);
            if (isCompilerDownloaded === true) {
                return;
            }
            await downloadStartedCb(isCompilerDownloaded);
            let build = await this._getCompilerBuild(version);
            if (build === undefined && (await this._shouldDownloadCompilerList())) {
                try {
                    await this._downloadCompilerList();
                }
                catch (_e) {
                    throw new errors_2.ResolcPluginError(`Resolc version ${version} is invalid or hasn't been released yet`);
                }
                build = await this._getCompilerBuild(version);
            }
            if (build === undefined) {
                throw new errors_2.ResolcPluginError(`Resolc version ${version} is invalid or hasn't been released yet`);
            }
            let downloadPath;
            try {
                downloadPath = await this._downloadCompiler(build);
            }
            catch (_e) {
                throw new errors_2.ResolcPluginError(`Couldn't download compiler version ${build.longVersion}. Please check your internet connection and try again.`);
            }
            const verified = await this._verifyCompilerDownload(build, downloadPath);
            if (!verified) {
                throw new errors_2.ResolcPluginError(`Couldn't download compiler version ${build.longVersion}: Checksum verification failed.`);
            }
            await this._postProcessCompilerDownload(build, downloadPath);
            await downloadEndedCb(isCompilerDownloaded);
        });
    }
    async getCompiler(version) {
        const build = await this._getCompilerBuild(version);
        (0, errors_1.assertHardhatInvariant)(build !== undefined, "Trying to get a compiler before it was downloaded");
        const resolcPath = this._getCompilerBinaryPathFromBuild(build);
        (0, errors_1.assertHardhatInvariant)(await fs_extra_1.default.pathExists(resolcPath), "Trying to get a compiler before it was downloaded");
        if (await fs_extra_1.default.pathExists(this._getCompilerDoesntWorkFile(build))) {
            return undefined;
        }
        return {
            version,
            longVersion: build.longVersion,
            resolcPath,
            isJs: this._platform === downloader_1.CompilerPlatform.WASM,
        };
    }
    async _downloadCompilerList() {
        const url = constants_1.COMPILER_REPOSITORY_API_URL;
        const downloadPath = this._getCompilerListPath();
        const name = ResolcCompilerDownloader.getCompilerName();
        const platform = ResolcCompilerDownloader.getCompilerPlatform();
        await this._downloadFunction(url, downloadPath, name, platform, true);
    }
    _getCompilerListPath() {
        return path_1.default.join(this._compilersDir, this._platform, "resolc-list.json");
    }
    async _shouldDownloadCompilerList() {
        const listPath = this._getCompilerListPath();
        if (!(await fs_extra_1.default.pathExists(listPath))) {
            return true;
        }
        const stats = await fs_extra_1.default.stat(listPath);
        const age = new Date().valueOf() - stats.ctimeMs;
        return age > this._compilerListCachePeriodMs;
    }
    async _getCompilerBuild(version) {
        const listPath = this._getCompilerListPath();
        if (!(await fs_extra_1.default.pathExists(listPath))) {
            return undefined;
        }
        const list = await this._readCompilerList(listPath);
        if (version === "latest") {
            const latestVersion = list.latestRelease.slice(1);
            return list.builds.find((b) => b.version === latestVersion);
        }
        return list.builds.find((b) => b.version === version);
    }
    async _readCompilerList(listPath) {
        return fs_extra_1.default.readJSON(listPath);
    }
    _getCompilerDownloadPathFromBuild(build) {
        return path_1.default.join(this._compilersDir, this._platform, build.path);
    }
    _getCompilerBinaryPathFromBuild(build) {
        const downloadPath = this._getCompilerDownloadPathFromBuild(build);
        if (this._platform !== downloader_1.CompilerPlatform.WINDOWS || !downloadPath.endsWith(".zip")) {
            return downloadPath;
        }
        return path_1.default.join(this._compilersDir, build.version, "resolc-x86_64-pc-windows-msvc.exe");
    }
    _getCompilerDoesntWorkFile(build) {
        return `${this._getCompilerBinaryPathFromBuild(build)}.does.not.work`;
    }
    async _downloadCompiler(build) {
        log(`Downloading resolc compiler ${build.longVersion}`);
        const url = `${constants_1.COMPILER_REPOSITORY_URL}v${build.version}/${build.name}`;
        const downloadPath = this._getCompilerDownloadPathFromBuild(build);
        const name = ResolcCompilerDownloader.getCompilerName();
        const platform = ResolcCompilerDownloader.getCompilerPlatform();
        await this._downloadFunction(url, downloadPath, name, platform);
        return downloadPath;
    }
    async _verifyCompilerDownload(build, downloadPath) {
        const { sha256 } = await Promise.resolve().then(() => __importStar(require("./utils")));
        const expectedSha256 = build.sha256;
        const compiler = await fs_extra_1.default.readFile(downloadPath);
        const compilerSha256 = sha256(compiler);
        if (expectedSha256 !== compilerSha256) {
            await fs_extra_1.default.unlink(downloadPath);
            return false;
        }
        return true;
    }
    async _postProcessCompilerDownload(build, downloadPath) {
        if (this._platform === downloader_1.CompilerPlatform.WASM) {
            return;
        }
        if (this._platform === downloader_1.CompilerPlatform.LINUX) {
            fs_extra_1.default.chmodSync(downloadPath, 0o755);
        }
        else if (this._platform === downloader_1.CompilerPlatform.MACOS) {
            const attributes = (0, fs_xattr_1.listAttributesSync)(downloadPath);
            for (const attr of attributes) {
                (0, fs_xattr_1.removeAttributeSync)(downloadPath, attr);
            }
            fs_extra_1.default.chmodSync(downloadPath, 0o755);
        }
        log("Checking native resolc binary");
        const nativeResolcWorks = await this._checkNativeResolc(build);
        if (nativeResolcWorks) {
            return;
        }
        await fs_extra_1.default.createFile(this._getCompilerDoesntWorkFile(build));
    }
    async _checkNativeResolc(build) {
        const resolcPath = this._getCompilerBinaryPathFromBuild(build);
        try {
            (0, child_process_1.execFile)(resolcPath, ["--version"]);
            return true;
        }
        catch {
            return false;
        }
    }
}
exports.ResolcCompilerDownloader = ResolcCompilerDownloader;
//# sourceMappingURL=downloader.js.map