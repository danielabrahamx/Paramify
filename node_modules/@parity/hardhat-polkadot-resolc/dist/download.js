"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.download = download;
const fs_extra_1 = __importDefault(require("fs-extra"));
const path_1 = __importDefault(require("path"));
const axios_1 = __importDefault(require("axios"));
const child_process_1 = require("child_process");
const constants_1 = require("./constants");
const TEMP_FILE_PREFIX = "tmp-";
function resolveTempFileName(filePath) {
    const { dir, ext, name } = path_1.default.parse(filePath);
    return path_1.default.format({
        dir,
        ext,
        name: `${TEMP_FILE_PREFIX}${name}`,
    });
}
async function download(url, filePath, name, platform, isList = false, timeoutMillis = 10000) {
    if (isList) {
        const releasesResponse = await axios_1.default.get(url, {
            timeout: timeoutMillis,
            responseType: "json",
        });
        const releasesData = releasesResponse.data;
        const releaseInfo = {};
        const builds = [];
        // eslint-disable-next-line @typescript-eslint/no-explicit-any
        const filteredReleases = releasesData.filter((r) => !r.prerelease);
        /**
         * Solidity provides a list of releases with their corresponding info via the endpoint
         * https://binaries.soliditylang.org/${PLATFORM}/list.json .
         *
         * In order to keep the interfaces coherent, and since we don't have such endpoint,
         * we build the list manually here.
         */
        if (Array.isArray(filteredReleases) && filteredReleases.length > 0) {
            for (const release of filteredReleases) {
                const commit = release.target_commitish.slice(0, 6);
                const path = `${name}+commit.${commit}`;
                const version = release.tag_name.slice(1);
                const build = commit;
                const longVersion = `${version}+commit.${commit}.llvm-18.1.8`;
                // eslint-disable-next-line @typescript-eslint/no-explicit-any
                const asset = release.assets.find((a) => a.name == name);
                let sha256 = "";
                if (!asset) {
                    continue;
                }
                else if (!asset.digest || asset.digest == null) {
                    const checksumResponse = await axios_1.default.get(`${constants_1.COMPILER_REPOSITORY_URL}v${version}/checksums.txt`, {
                        timeout: timeoutMillis,
                        responseType: "text",
                    });
                    const tempFile = `./${TEMP_FILE_PREFIX}checksums.txt`;
                    fs_extra_1.default.writeFileSync(tempFile, checksumResponse.data);
                    try {
                        const checksum = (0, child_process_1.execSync)(`grep ${name} ${tempFile}`).toString();
                        sha256 = checksum.trim().split(" ")[0];
                        fs_extra_1.default.remove(tempFile, (removeErr) => {
                            if (removeErr)
                                console.error("Failed to delete temp file:", removeErr);
                        });
                    }
                    catch (e) {
                        return console.error("grep failed:", e);
                    }
                }
                else {
                    sha256 = asset.digest.slice(7);
                }
                builds.push({
                    name,
                    path,
                    version,
                    build,
                    longVersion,
                    sha256,
                    platform,
                });
                releaseInfo[release.tag_name] = path;
            }
        }
        const list = {
            builds,
            releases: releaseInfo,
            latestRelease: releasesData[0].tag_name,
        };
        const tmpFilePath = resolveTempFileName(filePath);
        await fs_extra_1.default.ensureDir(path_1.default.dirname(filePath));
        await fs_extra_1.default.writeFile(tmpFilePath, JSON.stringify(list), "utf-8");
        return fs_extra_1.default.move(tmpFilePath, filePath, { overwrite: true });
    }
    const response = await axios_1.default.get(url, {
        timeout: timeoutMillis,
        responseType: "arraybuffer",
    });
    const tmpFilePath = resolveTempFileName(filePath);
    await fs_extra_1.default.ensureDir(path_1.default.dirname(filePath));
    await fs_extra_1.default.writeFile(tmpFilePath, Buffer.from(response.data));
    return fs_extra_1.default.move(tmpFilePath, filePath, { overwrite: true });
}
//# sourceMappingURL=download.js.map