import type { HardhatConfig } from "hardhat/types";
import type { CliCommands, CommandArguments, SplitCommands } from "./types";
export declare const PARITYPR_DOCKER_REGISTRY = "https://registry.hub.docker.com/v2/repositories/paritypr/";
export declare function constructCommandArgs(args?: CommandArguments, cliCommands?: CliCommands): SplitCommands;
export declare function isPortAvailable(port: number): Promise<boolean>;
export declare function getAvailablePort(startPort: number, maxAttempts: number): Promise<number>;
export declare function adjustTaskArgsForPort(taskArgs: string[], currentPort: number): string[];
export declare function getNetworkConfig(url: string, chainId?: number): {
    accounts: string[];
    gas: string;
    gasPrice: string;
    gasMultiplier: number;
    httpHeaders: {};
    timeout: number;
    url: string;
    ethNetwork: string;
    chainId: number;
};
export declare function configureNetwork(config: HardhatConfig, network: any, port: number): Promise<void>;
export declare function startServer(commands: CommandArguments, nodePath?: string, adapterPath?: string): Promise<{
    commandArgs: SplitCommands;
    server: import("./types").RpcServer;
    port: number;
}>;
/**
 * This function retrieves a list of the latest images available in the Docker registry
 * sortes them from newest to oldest, and returns the newest one, in order to be used by the DockerServer.
 */
export declare function getLatestImageName(containerName: string): Promise<string | undefined>;
