import { Actor, HttpAgent, Identity } from '@dfinity/agent';
import { AuthClient } from '@dfinity/auth-client';
import { IDL } from '@dfinity/candid';
import { HOST, CANISTER_IDS, IS_LOCAL } from './config';

// Import canister interfaces (these will be generated by dfx generate)
// For now we'll use placeholders - they'll be replaced when declarations are generated
let insuranceIDL: IDL.InterfaceFactory | null = null;
let oracleIDL: IDL.InterfaceFactory | null = null;
let paymentsIDL: IDL.InterfaceFactory | null = null;
let ledgerIDL: IDL.InterfaceFactory | null = null;

// Try to import generated declarations if they exist
try {
  // @ts-ignore - These imports will work after dfx generate
  insuranceIDL = (await import('../declarations/insurance')).idlFactory;
} catch (e) {
  console.warn('Insurance declarations not found, run dfx generate');
}

try {
  // @ts-ignore
  oracleIDL = (await import('../declarations/oracle')).idlFactory;
} catch (e) {
  console.warn('Oracle declarations not found, run dfx generate');
}

try {
  // @ts-ignore
  paymentsIDL = (await import('../declarations/payments')).idlFactory;
} catch (e) {
  console.warn('Payments declarations not found, run dfx generate');
}

try {
  // @ts-ignore
  ledgerIDL = (await import('../declarations/icrc1_ledger')).idlFactory;
} catch (e) {
  console.warn('Ledger declarations not found, run dfx generate');
}

// Agent instance
let agent: HttpAgent | null = null;
let authClient: AuthClient | null = null;

// Actor instances
let insuranceActor: any = null;
let oracleActor: any = null;
let paymentsActor: any = null;
let ledgerActor: any = null;

/**
 * Initialize the HTTP agent
 */
export async function initializeAgent(identity?: Identity): Promise<HttpAgent> {
  if (!agent) {
    agent = new HttpAgent({
      host: HOST,
      identity,
    });

    // Fetch root key for local development
    if (IS_LOCAL) {
      await agent.fetchRootKey().catch(err => {
        console.warn('Unable to fetch root key. Check if replica is running');
        throw err;
      });
    }
  } else if (identity) {
    // Update identity if provided
    agent.replaceIdentity(identity);
  }

  return agent;
}

/**
 * Initialize auth client and agent
 */
export async function initializeAuth(): Promise<void> {
  authClient = await AuthClient.create();
  const identity = authClient.getIdentity();
  await initializeAgent(identity);
}

/**
 * Get the current auth client
 */
export function getAuthClient(): AuthClient | null {
  return authClient;
}

/**
 * Get the current agent
 */
export function getAgent(): HttpAgent | null {
  return agent;
}

/**
 * Create an actor for a canister
 */
function createActor<T>(
  canisterId: string,
  idlFactory: IDL.InterfaceFactory | null
): T | null {
  if (!agent || !idlFactory || !canisterId) {
    console.warn(`Cannot create actor: agent=${!!agent}, idl=${!!idlFactory}, canisterId=${canisterId}`);
    return null;
  }

  return Actor.createActor<T>(idlFactory, {
    agent,
    canisterId,
  });
}

/**
 * Get the Insurance canister actor
 */
export function getInsuranceActor(): any {
  if (!insuranceActor && insuranceIDL) {
    insuranceActor = createActor(CANISTER_IDS.insurance, insuranceIDL);
  }
  return insuranceActor;
}

/**
 * Get the Oracle canister actor
 */
export function getOracleActor(): any {
  if (!oracleActor && oracleIDL) {
    oracleActor = createActor(CANISTER_IDS.oracle, oracleIDL);
  }
  return oracleActor;
}

/**
 * Get the Payments canister actor
 */
export function getPaymentsActor(): any {
  if (!paymentsActor && paymentsIDL) {
    paymentsActor = createActor(CANISTER_IDS.payments, paymentsIDL);
  }
  return paymentsActor;
}

/**
 * Get the Ledger canister actor
 */
export function getLedgerActor(): any {
  if (!ledgerActor && ledgerIDL) {
    ledgerActor = createActor(CANISTER_IDS.icrc1_ledger, ledgerIDL);
  }
  return ledgerActor;
}

/**
 * Reset all actors (useful after login/logout)
 */
export function resetActors(): void {
  insuranceActor = null;
  oracleActor = null;
  paymentsActor = null;
  ledgerActor = null;
}

/**
 * Check if the agent is initialized and ready
 */
export function isAgentReady(): boolean {
  return agent !== null;
}

/**
 * Set canister interfaces after they're loaded
 * This is useful for dynamic imports or when declarations are generated later
 */
export function setCanisterInterfaces(interfaces: {
  insurance?: IDL.InterfaceFactory;
  oracle?: IDL.InterfaceFactory;
  payments?: IDL.InterfaceFactory;
  ledger?: IDL.InterfaceFactory;
}): void {
  if (interfaces.insurance) insuranceIDL = interfaces.insurance;
  if (interfaces.oracle) oracleIDL = interfaces.oracle;
  if (interfaces.payments) paymentsIDL = interfaces.payments;
  if (interfaces.ledger) ledgerIDL = interfaces.ledger;
  
  // Reset actors to force recreation with new interfaces
  resetActors();
}